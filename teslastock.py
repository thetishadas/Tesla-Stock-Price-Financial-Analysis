# -*- coding: utf-8 -*-
"""TeslaStock.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1PZsn6185wjPH25uxp1wpPtdwwCFWgsFj
"""

import numpy as np
import pandas as pd
from pandas_datareader import data as wb
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.stats import norm
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score

from pandas_datareader import data as pdr
import yfinance as yf
yf.pdr_override()
# Define the stock symbol and time period for Tesla
tesla_symbol = 'TSLA'
from datetime import datetime
startdate = datetime(2022, 12, 1)
enddate = datetime(2024, 12, 1)

# Fetch the historical data for Tesla
data = pdr.get_data_yahoo(tesla_symbol, start=startdate, end=enddate)
data.head()

# Preprocess the data
data.fillna(method='ffill', inplace=True)
data.dropna(inplace=True)

# Feature Engineering: Adding moving averages and RSI
data['MA10'] = data['Close'].rolling(window=10).mean()
data['MA50'] = data['Close'].rolling(window=50).mean()
data['RSI'] = RSI(data['Close'])

def RSI(series, period=14):
    delta = series.diff(1)
    gain = delta.where(delta > 0, 0)
    loss = -delta.where(delta < 0, 0)
    avg_gain = gain.rolling(window=period).mean()
    avg_loss = loss.rolling(window=period).mean()
    rs = avg_gain / avg_loss
    return 100 - (100 / (1 + rs))

# Normalize the data
from sklearn.preprocessing import MinMaxScaler
scaler = MinMaxScaler()
data_scaled = scaler.fit_transform(data[['Close', 'MA10', 'MA50', 'RSI']])

# Prepare the training and testing data
def prepare_data(data, n_steps):
    X, y = [], []
    for i in range(len(data) - n_steps):
        X.append(data[i:i+n_steps, :-1])
        y.append(data[i+n_steps, 0])
    return np.array(X), np.array(y)


n_steps = 50
X, y = prepare_data(data_scaled, n_steps)

# Split into training and testing sets
split = int(len(X) * 0.8)
X_train, X_test = X[:split], X[split:]
y_train, y_test = y[:split], y[split:]

# Build the LSTM model
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense


model = Sequential([
    LSTM(50, activation='relu', return_sequences=True, input_shape=(n_steps, X.shape[2])),
    LSTM(50, activation='relu'),
    Dense(1)
])
model.compile(optimizer='adam', loss='mse')
model.fit(X_train, y_train, epochs=50, batch_size=32, validation_split=0.2)

model.compile(optimizer='adam', loss='mse')
model.fit(X_train, y_train, epochs=100, batch_size=32, validation_split=0.2)

# Evaluate the model
loss = model.evaluate(X_test, y_test)
print(f'Test Loss: {loss}')

# Make predictions
y_pred = model.predict(X_test)

# Inverse transform to get actual values
y_test_actual = scaler.inverse_transform(np.concatenate((y_test.reshape(-1, 1), np.zeros((len(y_test), 3))), axis=1))[:, 0]
y_pred_actual = scaler.inverse_transform(np.concatenate((y_pred, np.zeros((len(y_pred), 3))), axis=1))[:, 0]

# Calculate evaluation metrics
mse = mean_squared_error(y_test_actual, y_pred_actual)
mae = mean_absolute_error(y_test_actual, y_pred_actual)
r2 = r2_score(y_test_actual, y_pred_actual)
print(f'Mean Squared Error: {mse}')
print(f'Mean Absolute Error: {mae}')
print(f'RÂ² Score: {r2}')

# Plot the results
plt.figure(figsize=(14, 7))
plt.plot(y_test_actual, color='blue', label='Actual Stock Price')
plt.plot(y_pred_actual, color='red', label='Predicted Stock Price')
plt.title('Tesla Stock Price Prediction')
plt.xlabel('Time')
plt.ylabel('Stock Price')
plt.legend()
plt.show()

# Scatter plot of Actual vs Predicted prices
plt.figure(figsize=(10, 6))
plt.scatter(y_test_actual, y_pred_actual, alpha=0.5)
plt.plot([min(y_test_actual), max(y_test_actual)], [min(y_test_actual), max(y_test_actual)], color='red')  # Identity line
plt.title('Actual vs Predicted Stock Prices')
plt.xlabel('Actual Stock Price')
plt.ylabel('Predicted Stock Price')
plt.show()

# Rolling mean plot
rolling_mean_window = 20
y_test_actual_rm = pd.Series(y_test_actual).rolling(window=rolling_mean_window).mean()
y_pred_actual_rm = pd.Series(y_pred_actual).rolling(window=rolling_mean_window).mean()

plt.figure(figsize=(14, 7))
plt.plot(y_test_actual_rm, color='blue', label='Actual Rolling Mean')
plt.plot(y_pred_actual_rm, color='red', label='Predicted Rolling Mean')
plt.title(f'Rolling Mean (Window = {rolling_mean_window})')
plt.xlabel('Time')
plt.ylabel('Stock Price')
plt.legend()
plt.show()

# Residual plot
residuals = y_test_actual - y_pred_actual
plt.figure(figsize=(10, 6))
plt.scatter(y_test_actual, residuals, alpha=0.5)
plt.hlines(y=0, xmin=min(y_test_actual), xmax=max(y_test_actual), color='red')
plt.title('Residuals Plot')
plt.xlabel('Actual Stock Price')
plt.ylabel('Residuals')
plt.show()

# Distribution of errors
plt.figure(figsize=(10, 6))
sns.histplot(residuals, kde=True)
plt.title('Distribution of Residuals')
plt.xlabel('Residuals')
plt.ylabel('Frequency')
plt.show()

